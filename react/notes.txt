React

React is a JavaScript library for building user interfaces.

State and Component

State is the data that is stored in a component. It is used to keep track of the data that is displayed in the component.

Component is a part of the user interface that is responsible for rendering the data. It is a reusable, dynamic piece of code that can be used to build user interfaces. 
It changes the state of the component and re-renders the component.

A state change triggers a re-render of the component. A re-render is a process of updating the user interface to reflect the new state of the component.
A re-render represents the actual DOM being manipulated when the state changes.


We just have to define all the components once and then all we have to do is update the state of your app and React takes care of re-render the components.


JSX
A JavaScript syntax extension for writing HTML in JavaScript. JSX allows you to write HTML like code directly in your JavaScript files.

A React component returns a XML.


const [count,setCount]=useState(0); 

here the array is a constant and the first element is the state variable and the second element is the function to update the state variable
So we can change the state variable by calling the function setCount(count+1);
but we can't change the array itself as it is a constant. values inside the array can be changed by calling the function setCount(count+1);


React Side Effects

React components can have side effects.

Side effects are code that runs outside of the component.
Side effects are operations that interact with the outside world or have effects beyond the component's rendering.
Ex- fetching data from an API, logging into a database, or interacting with a third-party service, modifying the DOM manually, starting a timer, or subscribing to a WebSocket. 


These are called side effects because they don't just compute output based on the inputs, they affect things outside the component.

Problem in running side effects in React components
If you try to introduce side effects directly in the rendering logic of a component (in the return statement or before it), React would run that code every time the component renders. This can lead to:

- Unnecessary or duplicated effects (like multiple API calls).
- Inconsistent behavior (side effects might happen before rendering finishes).
- Performance issues (side effects could block rendering or cause excessive re-rendering).