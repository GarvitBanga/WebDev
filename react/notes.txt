React

React is a JavaScript library for building user interfaces.

State and Component

State is the data that is stored in a component. It is used to keep track of the data that is displayed in the component.

Component is a part of the user interface that is responsible for rendering the data. It is a reusable, dynamic piece of code that can be used to build user interfaces. 
It changes the state of the component and re-renders the component.

A state change triggers a re-render of the component. A re-render is a process of updating the user interface to reflect the new state of the component.
A re-render represents the actual DOM being manipulated when the state changes.


We just have to define all the components once and then all we have to do is update the state of your app and React takes care of re-render the components.


JSX
A JavaScript syntax extension for writing HTML in JavaScript. JSX allows you to write HTML like code directly in your JavaScript files.

A React component returns a XML.


const [count,setCount]=useState(0); 

here the array is a constant and the first element is the state variable and the second element is the function to update the state variable
So we can change the state variable by calling the function setCount(count+1);
but we can't change the array itself as it is a constant. values inside the array can be changed by calling the function setCount(count+1);


React Side Effects

React components can have side effects.

Side effects are code that runs outside of the component.
Side effects are operations that interact with the outside world or have effects beyond the component's rendering.
Ex- fetching data from an API, logging into a database, or interacting with a third-party service, modifying the DOM manually, starting a timer, or subscribing to a WebSocket. 


These are called side effects because they don't just compute output based on the inputs, they affect things outside the component.

Problem in running side effects in React components
If you try to introduce side effects directly in the rendering logic of a component (in the return statement or before it), React would run that code every time the component renders. This can lead to:

- Unnecessary or duplicated effects (like multiple API calls).
- Inconsistent behavior (side effects might happen before rendering finishes).
- Performance issues (side effects could block rendering or cause excessive re-rendering).


Children prop allows you to pass elements or components as children to a component.


Class based components vs Functional components

Class components are classes that extend the React.Component class while functional components are simple and can use hooks. 

import React, { Component } from 'react';

class ClassCounter extends Component {
    state = { count: 0 }; //declare all the state variables here

    increment = () => {
        this.setState({ count: this.state.count + 1 });
    };

    render() {
        return (
            <div>
                <p>Count: {this.state.count}</p>
                <button onClick={this.increment}>Increment</button>
            </div>
        );
    }
}

import React, { useState } from 'react';

const FunctionalCounter = () => {
    const [count, setCount] = useState(0);
    
    function increment() {
	    setCount(count => count + 1)
    }

    return (
        <div>
            <p>Count: {count}</p>
            <button onClick={increment}>Increment</button>
        </div>
    );
};


Lifecycle events
Error Boundaries are react components that catch JS errors in their child component tree and display a fallback UI instead of crashing. only in class based components.

<>
</> when returning from app
we can also use <Fragment>
</Fragment> importing from react to do the same 



useState is a hook that lets you add state to functional components. it returns an array with two elements, the first element is the state variable and the second element is the function to update the state variable.



useEffect will run only once when the component is mounted. 

Mounting is the process of initializing a component and rendering it to the DOM. 

When a component is mounted, we run the useEffect hook function. like setInterval will run only once when the component is mounted.

setInterval(function()=>{
    setCount(count+1);},1000);
so instead of using setInterval we can use useEffect

useEffect(()=>{
    setInterval(()=>{
        setCount(count+1);
    },1000);
},[]);

[]
is an empty array that is passed as a second argument to useEffect.

this guards the setInterval function from running on every render.


Recommended way to useState is:
setCount(function(cnt{
    return cnt+1;
}));

useEffect with clear interval do remember this
const [count,setCount]=useState(0);
useEffect(()=>{
    let clock=setInterval(()=>{
        console.log(count);
        setCount(count+1);
    },1000);

    return function(){
        clearInterval(clock);
    }
},[]);

The code we write inside useEffect is used at the time of mounting and ignored during re-renders and the function we return from useEffect is called at the time of unmounting.

useEffect(function(){
    console.log("mounted");
    return function(){
        console.log("unmounted");
    }
},[]);
As useEffect only runs when the component is mounted but we can pass state variables in Dependency array so that useEffect also runs  when the state variable changes.
Dependency array 

useEffect(()=>{
    console.log("count has changed");
},[count]);


useEffect(()=>{
    console.log("count has changed");
    return function(){
        console.log("cleanup inside useEffect");
    }
},[count]);

first console.log will run when the component is mounted.
Now if the count changes so both the console.log lines will run when count changes as first the cleanupcode will run to unmount the previous component and then the new component will be mounted and the first console.log will run.

If we don't pass any dependency array then useEffect will run only once when the component is mounted.


In React, useRef is a hook that provides a way to create a reference to a value or a DOM element that persists across renders but does not trigger a re-render when the value changes.

useRef gives a reference to a value such that when you change the value of the reference, the component doesn't re-render. 


Prop drilling occurs when you need to pass data from a higher-level component down to a lower-level component that is several layers deep in the component tree. This often leads to the following issues:
Complexity: You may have to pass props through many intermediate components that don’t use the props themselves, just to get them to the component that needs them.
Maintenance: It can make the code harder to maintain, as changes in the props structure require updates in multiple components.


The Context API is a powerful feature in React that enables you to manage state across your application more effectively, especially when dealing with deeply nested components.

The Context API provides a way to share values (state, functions, etc.) between components without having to pass props down manually at every level. 

- Context: This is created using `React.createContext()`. It serves as a container for the data you want to share.
- Provider: This component wraps part of your application and provides the context value to all its descendants. Any component that is a child of this Provider can access the context.
- Consumer: This component subscribes to context changes. It allows you to access the context value (using `useContext`  hook)



Custom hooks in React are a powerful feature that allows you to encapsulate and reuse stateful logic across different components. They are essentially JavaScript functions that can use React hooks internally. By creating custom hooks, you can abstract away complex logic, making your components cleaner and more manageable.
 If you find yourself using the same logic in multiple components, a custom hook can help you avoid code duplication.
 They allow you to separate business logic from UI logic, making your components more focused and easier to understand.


 Explore https://usehooks.com/

 https://giacomocerquone.com/blog/life-death-useprevious-hook/

 useDebounce function


 Recoil 

A state management library for React that provides a way to manage global state with fine-grained control. Recoil minimizes unnecessary renders by only re-rendering components that depend on changed atoms. The performance of a React app is measured by the number of re-renders. Each re-render is expensive, and you should aim to minimise it.
Atoms: Units of state that can be read from and written to from any component. Selectors: Functions that derive state from atoms or other selectors, allowing for computed state.

Atoms are units of state that can be read from and written to from any component. When an atom’s state changes, all components that subscribe to that atom will re-render.


when a component re-renders, all its children re-render as well.